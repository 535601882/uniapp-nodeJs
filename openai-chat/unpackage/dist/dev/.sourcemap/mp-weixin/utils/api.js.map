{"version":3,"file":"api.js","sources":["utils/api.js"],"sourcesContent":["import { globalUser } from './global'\r\n\r\nconst BASE = import.meta.env.VITE_BASE_URL;\r\n\r\nfunction requestWithToken(options, retry = true) {\r\n  return new Promise((resolve, reject) => {\r\n    uni.request({\r\n      //永不超时\r\n      timeout:600000, //600秒\r\n      ...options,\r\n      url: BASE + options.url,\r\n      header: {\r\n        ...options.header,\r\n        token: globalUser.token || uni.getStorageSync('token') || ''\r\n      },\r\n      success: (res) => {\r\n        if (res.data.code === 401 && retry) {\r\n          // token 失效，自动刷新\r\n          refreshTokenApi().then(newToken => {\r\n            globalUser.token = newToken\r\n            uni.setStorageSync('token', newToken)\r\n            // 重试原请求\r\n            requestWithToken(options, false).then(resolve).catch(reject)\r\n          })\r\n        } else if (res.data.code !== 0) {\r\n          uni.showToast({ title: res.data.msg || '请求失败', icon: 'none' })\r\n          reject(res.data)\r\n        } else {\r\n          resolve(res.data.data)\r\n        }\r\n      },\r\n      fail: (err) => {\r\n        uni.showToast({ title: '网络错误', icon: 'none' })\r\n        reject(err)\r\n      }\r\n    })\r\n  })\r\n}\r\n\r\nexport function getUserApi(openid) {\r\n  return requestWithToken({\r\n    url: '/api/user/' + openid,\r\n    method: 'GET'\r\n  })\r\n}\r\nexport function refreshTokenApi() {\r\n  return requestWithToken({\r\n    url: '/api/token',\r\n    method: 'POST'\r\n  }).then(res => res.token)\r\n}\r\nexport function chatApi(openid, messages) {\r\n  return requestWithToken({\r\n    url: '/api/chat',\r\n    method: 'POST',\r\n    data: { openid, messages }\r\n  })\r\n}\r\nexport function imageApi(data) {\r\n  return requestWithToken({\r\n    url: '/api/image',\r\n    method: 'POST',\r\n    data\r\n  })\r\n}\r\nexport function getHistoryApi(openid) {\r\n  return requestWithToken({ \r\n    url: '/api/history/' + openid,\r\n    method: 'GET'\r\n  })\r\n} "],"names":["uni","globalUser"],"mappings":";;;AAEA,MAAM,OAAO;AAEb,SAAS,iBAAiB,SAAS,QAAQ,MAAM;AAC/C,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtCA,kBAAAA,MAAI,QAAQ;AAAA;AAAA,MAEV,SAAQ;AAAA;AAAA,MACR,GAAG;AAAA,MACH,KAAK,OAAO,QAAQ;AAAA,MACpB,QAAQ;AAAA,QACN,GAAG,QAAQ;AAAA,QACX,OAAOC,aAAW,WAAA,SAASD,cAAI,MAAA,eAAe,OAAO,KAAK;AAAA,MAC5D;AAAA,MACA,SAAS,CAAC,QAAQ;AAChB,YAAI,IAAI,KAAK,SAAS,OAAO,OAAO;AAElB,0BAAA,EAAE,KAAK,CAAY,aAAA;AACjCC,yBAAA,WAAW,QAAQ;AACfD,0BAAAA,MAAA,eAAe,SAAS,QAAQ;AAEpC,6BAAiB,SAAS,KAAK,EAAE,KAAK,OAAO,EAAE,MAAM,MAAM;AAAA,UAAA,CAC5D;AAAA,QACQ,WAAA,IAAI,KAAK,SAAS,GAAG;AAC1BA,wBAAAA,MAAA,UAAU,EAAE,OAAO,IAAI,KAAK,OAAO,QAAQ,MAAM,OAAA,CAAQ;AAC7D,iBAAO,IAAI,IAAI;AAAA,QAAA,OACV;AACG,kBAAA,IAAI,KAAK,IAAI;AAAA,QACvB;AAAA,MACF;AAAA,MACA,MAAM,CAAC,QAAQ;AACbA,sBAAA,MAAI,UAAU,EAAE,OAAO,QAAQ,MAAM,QAAQ;AAC7C,eAAO,GAAG;AAAA,MACZ;AAAA,IAAA,CACD;AAAA,EAAA,CACF;AACH;AAQO,SAAS,kBAAkB;AAChC,SAAO,iBAAiB;AAAA,IACtB,KAAK;AAAA,IACL,QAAQ;AAAA,EACT,CAAA,EAAE,KAAK,CAAA,QAAO,IAAI,KAAK;AAC1B;AACgB,SAAA,QAAQ,QAAQ,UAAU;AACxC,SAAO,iBAAiB;AAAA,IACtB,KAAK;AAAA,IACL,QAAQ;AAAA,IACR,MAAM,EAAE,QAAQ,SAAS;AAAA,EAAA,CAC1B;AACH;AAQO,SAAS,cAAc,QAAQ;AACpC,SAAO,iBAAiB;AAAA,IACtB,KAAK,kBAAkB;AAAA,IACvB,QAAQ;AAAA,EAAA,CACT;AACH;;;"}