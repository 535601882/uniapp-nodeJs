{"version":3,"file":"api.js","sources":["utils/api.js"],"sourcesContent":["import { globalUser } from './global'\r\n\r\nconst BASE = import.meta.env.VITE_BASE_URL;\r\n\r\nfunction requestWithToken(options, retry = true, noRefresh = false) {\r\n  return new Promise((resolve, reject) => {\r\n    uni.request({\r\n      //永不超时\r\n      timeout:600000, //600秒\r\n      ...options,\r\n      url: BASE + options.url,\r\n      header: {\r\n        ...options.header,\r\n        token: globalUser.token || uni.getStorageSync('token') || '',\r\n        refreshToken: globalUser.refreshToken || uni.getStorageSync('refreshToken') || ''\r\n      },\r\n      success: (res) => {\r\n        console.log(\"res\",res);\r\n        if (res.data.code === 401 && retry && !noRefresh) {\r\n          console.log(\"requestWithToken 重新请求\");\r\n          // token 失效，自动刷新\r\n          refreshTokenApi().then(({ token: newToken, refreshToken: newRefreshToken }) => {\r\n            globalUser.token = newToken;\r\n            globalUser.refreshToken = newRefreshToken;\r\n            uni.setStorageSync('token', newToken);\r\n            uni.setStorageSync('refreshToken', newRefreshToken);\r\n            // 重试原请求\r\n            requestWithToken(options, false).then(resolve).catch(reject)\r\n          }).catch(() => {\r\n            // 刷新失败，清理token并提示\r\n            globalUser.token = '';\r\n            globalUser.refreshToken = '';\r\n            uni.setStorageSync('token', '');\r\n            uni.setStorageSync('refreshToken', '');\r\n            uni.showToast({ title: '登录已过期，请重新登录', icon: 'none' })\r\n            reject(res.data)\r\n          })\r\n        } else if (res.data.code !== 0) {\r\n          uni.showToast({ title: res.data.msg || '请求失败', icon: 'none' })\r\n          reject(res.data)\r\n        } else {\r\n          resolve(res.data.data)\r\n        }\r\n      },\r\n      fail: (err) => {\r\n        uni.showToast({ title: '网络错误', icon: 'none' })\r\n        reject(err)\r\n      }\r\n    })\r\n  })\r\n}\r\n\r\n// 实现对uni.uploadFile的统一封装\r\n/**\r\n * 封装上传文件请求，自动带token，返回Promise\r\n * @param {Object} options uni.uploadFile参数，url为相对路径\r\n * @returns {Promise}\r\n */\r\nexport function uploadFileWithToken(options) {\r\n  return new Promise((resolve, reject) => {\r\n    uni.uploadFile({\r\n      ...options,\r\n      url: BASE + options.url,\r\n      header: {\r\n        ...options.header,\r\n        token: globalUser.token || uni.getStorageSync('token') || ''\r\n      },\r\n      success: (res) => {\r\n        console.log(\"res data\", res.data);\r\n        let data;\r\n        try {\r\n          data = typeof res.data === 'string' ? JSON.parse(res.data) : res.data;\r\n        } catch (e) {\r\n          uni.showToast({ title: '返回数据格式错误', icon: 'none' });\r\n          return reject(res);\r\n        }\r\n\r\n        console.log(\"data ==== \",data);\r\n        if (data.code === 401) {\r\n\t\t\tconsole.log(\"uploadFileWithToken 重新请求\");\r\n          // token失效，自动刷新\r\n          refreshTokenApi().then(newToken => {\r\n            globalUser.token = newToken;\r\n            uni.setStorageSync('token', newToken);\r\n            // 重试原请求\r\n            uploadFileWithToken(options).then(resolve).catch(reject);\r\n          }).catch(err => {\r\n            uni.showToast({ title: 'token刷新失败', icon: 'none' });\r\n            reject(err);\r\n          });\r\n        } else if (data.code !== 0) {\r\n          uni.showToast({ title: data.msg || '上传失败', icon: 'none' });\r\n          reject(data);\r\n        } else {\r\n          resolve(data.data);\r\n        }\r\n      },\r\n      fail: (err) => {\r\n        uni.showToast({ title: '网络错误', icon: 'none' });\r\n        reject(err);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\n\r\n\r\nexport function getUserApi(openid) {\r\n  return requestWithToken({\r\n    url: '/api/user/' + openid,\r\n    method: 'GET'\r\n  })\r\n}\r\nexport function refreshTokenApi() {\r\n  return requestWithToken({\r\n    url: '/api/token/refresh',\r\n    method: 'POST',\r\n    data: {\r\n      refreshToken: globalUser.refreshToken || uni.getStorageSync('refreshToken') || ''\r\n    }\r\n  }, true, true).then(res => ({ token: res.token, refreshToken: res.refreshToken }))\r\n}\r\nexport function chatApi(openid, messages) {\r\n  return requestWithToken({\r\n    url: '/api/chat',\r\n    method: 'POST',\r\n    data: { openid, messages }\r\n  })\r\n}\r\nexport function imageApi(data) {\r\n  return requestWithToken({\r\n    url: '/api/image',\r\n    method: 'POST',\r\n    data\r\n  })\r\n}\r\nexport function getHistoryApi(openid) {\r\n  return requestWithToken({ \r\n    url: '/api/history/' + openid,\r\n    method: 'GET'\r\n  })\r\n} "],"names":["uni","globalUser"],"mappings":"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"}